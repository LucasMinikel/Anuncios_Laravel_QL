scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find
    users(
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 5)
    tag(
      id: ID @eq 
      slug: String @eq
    ): Tag @find
    tags(
      titulo: String @where(operator: "like")
    ): [Tag!]! @all

    anuncios(
      orderBy: _ @orderBy(columns:["created_at","anuncio_favorito"])
      hasTags: _ @whereHasConditions(columns: ["slug"])
      ): [Anuncio!]! @all

      me:User @auth
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    anuncios(
      id: ID @eq
      orderBy: _ @orderBy(columns:["created_at"]))
    :[Anuncio!]! @hasMany
}

type Tag {
    id: ID!
    titulo: String!
    slug: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Anuncio {
    id: ID!
    anuncio_titulo: String!
    anuncio_local: String!
    anuncio_link: String!
    anuncio_empresa: String!
    anuncio_logo: String!
    anuncio_marcado: Boolean!
    anuncio_favorito: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
    tags: [Tag!]! @belongsToMany
    user: User! @belongsTo
}


input CreateUserInput{
  name: String @rules(apply:["required"])
  email: String @rules(apply:["required", "email"])
  password: String @rules(apply:["required", "min:5"]) @hash
}

input CreateTagsBelongsToMany{
  connect: [ID!] @rulesForArray(apply:["required"])
}
input UpdateTagsBelongsToMany{
  sync: [ID!] @rulesForArray(apply:["required"])
}

input CreateAnuncioInput{
    anuncio_titulo: String @rules(apply:["required"])
    anuncio_local: String @rules(apply:["required"])
    anuncio_link: String @rules(apply:["required", "url"])
    anuncio_empresa: String @rules(apply:["required"])
    anuncio_logo: String @rules(apply:["required", "url"])
    anuncio_marcado: Boolean @rules(apply:["boolean"])
    anuncio_favorito: Boolean @rules(apply:["boolean"])
    tags: CreateTagsBelongsToMany!
}
input UpdateAnuncioInput{
    anuncio_titulo: String @rules(apply:["required"])
    anuncio_local: String @rules(apply:["required"])
    anuncio_link: String @rules(apply:["required", "url"])
    anuncio_empresa: String @rules(apply:["required"])
    anuncio_logo: String @rules(apply:["required", "url"])
    anuncio_marcado: Boolean @rules(apply:["boolean"])
    anuncio_favorito: Boolean @rules(apply:["boolean"])
    tags: UpdateTagsBelongsToMany!
}

type Mutation{
  createUser(input: CreateUserInput! @spread): User! @create

  createAnuncio(input: CreateAnuncioInput! @spread): Anuncio! 
    @create
    @guard
    @inject(context: "user.id", name:"user_id")

    updateAnuncio(id: ID!, input: UpdateAnuncioInput! @spread): Anuncio! @update
    @can(ability:"update", find: "id")
}